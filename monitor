#!/bin/bash

echo "Bienvenido al sistema de monitoreo de recursos."
echo "Este programa monitorea el uso de CPU, memoria y disco."
echo "Para detener la ejecución, presiona Ctrl + C."

# Solicitar al usuario que ingrese el intervalo de tiempo
while true; do
    read -p "Ingrese cada cuantos segundos desea monitorear el sistema (mayor o igual a 1 segundo): " tiempo
    if [[ $tiempo -ge 1 ]]; then
        break
    else
        echo "El intervalo debe ser mayor o igual a 1 segundo. Intenta de nuevo."
    fi
done

echo "Monitoreo comenzado. Intervalo: $tiempo segundos."

# Inicializar el archivo CSV con encabezados
echo "Timestamp, CPU (%), Memoria (%), Disco (%)" > reporte_recursos.csv

# Función para obtener las métricas del sistema
obtener_datos() {
    # Obtener el porcentaje de uso de CPU (promedio)
    cpu=$(vmstat 1 2 | tail -1 | tr -s ' ' | cut -d ' ' -f 15)
    cpu=$((100 - cpu))

    # Obtener el porcentaje de uso de memoria
    memoria_usada=$(free | grep Mem | tr -s ' ' | cut -d ' ' -f 3)
    memoria_total=$(free | grep Mem | tr -s ' ' | cut -d ' ' -f 2)
    memoria=$((memoria_usada * 100 / memoria_total))

    # Obtener el porcentaje de uso de disco
    disco=$(df / | head -2 | tail -1 | tr -s ' ' | cut -d ' ' -f 5 | cut -d '%' -f 1)

    # Obtener la fecha y hora actuales
    fecha_hora=$(date +"%Y-%m-%d %H:%M:%S")
    
    # Imprimir en consola y guardar en archivo CSV
    echo "$fecha_hora | CPU: $cpu%, Memoria: $memoria%, Disco: $disco%"
    echo "$fecha_hora, $cpu, $memoria, $disco" >> reporte_recursos.csv
}

# Capturar la señal de Ctrl + C y salir del script
trap "echo -e '\nMonitoreo detenido por el usuario.'; exit 0" SIGINT

# Bucle principal para monitorear el sistema
while true; do
    obtener_datos
    sleep "$tiempo"
done

